1 # Caching Inverse of a Matrix 
2 
 
3 # Example usage 
4 # m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE) 
5 # m2 <- makeCacheMatrix(m) 
6 # cacheSolve(m2) 
7 # [,1] [,2] 
8 # [1,]  0.0    1 
9 # [2,]  0.5    0 
10 # cacheSolve(m2) 
11 # inverse is cached 
12 # [,1] [,2] 
13 # [1,]  0.0    1 
14 # [2,]  0.5    0 
15 
 
16 # Creates a matrix that can cache it's inverse 
17 # 
18 # Args: 
19 #   x: A matrix (Optional) 
20 # 
21 # Returns: 
22 #   A matrix with functions to get/set value & get/set inverse 
23 makeCacheMatrix <- function(x = matrix()) { 
24   # cached inverse of matrix 
25   inv <- NULL 
26    
27   ## getter/setter for matrix 
28   get <- function() x 
29   set <- function(y) { 
30     x <<- y 
31     inv <<- NULL 
32   } 
33    
34   ## getter/setter for matrix inverse 
35   getinv <- function() inv 
36   setinv <- function(inverse) inv <<- inverse 
37    
38   ## return list of functions for matrix 
39   list(get=get, set=set, getinv=getinv, setinv=setinv) 
40 } 
41 
 
42 # Computes the inverse of a matrix. If the inverse has already been 
43 # calculated before, the cached inverse is returned. 
44 # 
45 # Args: 
46 #   x: A matrix 
47 #   ...: Extra arguments 
48 # 
49 # Returns: 
50 #   The inverse of the matrix 
51 cacheSolve <- function(x, ...) { 
52   inv <- x$getinv() 
53 
 
54   # return cached matrix inverse if it's been already computed 
55   if (!is.null(inv)) { 
56     message("inverse is cached") 
57     return(inv) 
58   } 
59    
60   # compute inverse of matrix  
61   m <- x$get() 
62   inv <- solve(m, ...) 
63    
64   # cache inverse 
65   x$setinv(inv) 
66    
67   # return inverse of matrix 
68   return(inv) 
69 } 
